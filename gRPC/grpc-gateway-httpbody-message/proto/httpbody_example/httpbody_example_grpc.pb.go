// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: httpbody_example/httpbody_example.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HttpBodyExampleService_HelloWorld_FullMethodName = "/http.body.example.HttpBodyExampleService/HelloWorld"
	HttpBodyExampleService_Download_FullMethodName   = "/http.body.example.HttpBodyExampleService/Download"
	HttpBodyExampleService_Upload_FullMethodName     = "/http.body.example.HttpBodyExampleService/Upload"
)

// HttpBodyExampleServiceClient is the client API for HttpBodyExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpBodyExampleServiceClient interface {
	HelloWorld(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Download(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HttpBodyExampleService_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (HttpBodyExampleService_UploadClient, error)
}

type httpBodyExampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpBodyExampleServiceClient(cc grpc.ClientConnInterface) HttpBodyExampleServiceClient {
	return &httpBodyExampleServiceClient{cc}
}

func (c *httpBodyExampleServiceClient) HelloWorld(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, HttpBodyExampleService_HelloWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBodyExampleServiceClient) Download(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (HttpBodyExampleService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &HttpBodyExampleService_ServiceDesc.Streams[0], HttpBodyExampleService_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &httpBodyExampleServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HttpBodyExampleService_DownloadClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type httpBodyExampleServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *httpBodyExampleServiceDownloadClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *httpBodyExampleServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (HttpBodyExampleService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &HttpBodyExampleService_ServiceDesc.Streams[1], HttpBodyExampleService_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &httpBodyExampleServiceUploadClient{stream}
	return x, nil
}

type HttpBodyExampleService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type httpBodyExampleServiceUploadClient struct {
	grpc.ClientStream
}

func (x *httpBodyExampleServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *httpBodyExampleServiceUploadClient) CloseAndRecv() (*httpbody.HttpBody, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HttpBodyExampleServiceServer is the server API for HttpBodyExampleService service.
// All implementations must embed UnimplementedHttpBodyExampleServiceServer
// for forward compatibility
type HttpBodyExampleServiceServer interface {
	HelloWorld(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	Download(*emptypb.Empty, HttpBodyExampleService_DownloadServer) error
	Upload(HttpBodyExampleService_UploadServer) error
	mustEmbedUnimplementedHttpBodyExampleServiceServer()
}

// UnimplementedHttpBodyExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpBodyExampleServiceServer struct {
}

func (UnimplementedHttpBodyExampleServiceServer) HelloWorld(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedHttpBodyExampleServiceServer) Download(*emptypb.Empty, HttpBodyExampleService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedHttpBodyExampleServiceServer) Upload(HttpBodyExampleService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedHttpBodyExampleServiceServer) mustEmbedUnimplementedHttpBodyExampleServiceServer() {
}

// UnsafeHttpBodyExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpBodyExampleServiceServer will
// result in compilation errors.
type UnsafeHttpBodyExampleServiceServer interface {
	mustEmbedUnimplementedHttpBodyExampleServiceServer()
}

func RegisterHttpBodyExampleServiceServer(s grpc.ServiceRegistrar, srv HttpBodyExampleServiceServer) {
	s.RegisterService(&HttpBodyExampleService_ServiceDesc, srv)
}

func _HttpBodyExampleService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBodyExampleServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpBodyExampleService_HelloWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBodyExampleServiceServer).HelloWorld(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBodyExampleService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HttpBodyExampleServiceServer).Download(m, &httpBodyExampleServiceDownloadServer{stream})
}

type HttpBodyExampleService_DownloadServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type httpBodyExampleServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *httpBodyExampleServiceDownloadServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _HttpBodyExampleService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HttpBodyExampleServiceServer).Upload(&httpBodyExampleServiceUploadServer{stream})
}

type HttpBodyExampleService_UploadServer interface {
	SendAndClose(*httpbody.HttpBody) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type httpBodyExampleServiceUploadServer struct {
	grpc.ServerStream
}

func (x *httpBodyExampleServiceUploadServer) SendAndClose(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func (x *httpBodyExampleServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HttpBodyExampleService_ServiceDesc is the grpc.ServiceDesc for HttpBodyExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpBodyExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "http.body.example.HttpBodyExampleService",
	HandlerType: (*HttpBodyExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HttpBodyExampleService_HelloWorld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _HttpBodyExampleService_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _HttpBodyExampleService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "httpbody_example/httpbody_example.proto",
}

openapi: '3.0.2'
info: 
  title: CRUD user information
  description: This is example of CRUD user information
  contact:
    name: Dinh Ngoc Quan
    url: https://www.example.com/support
    email: quan.dn@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.1'
servers:
  - url: http://localhost:{port}/{basePath}
    description: local server
    variables:
      port: 
        enum:
          - "8080"
          - "8081"
          - "8082"
        default: "8080"
      basePath: 
        default: v1
tags:
  - name: user
    description: user operations
paths:
  /users:
    get:
      tags:
        - user
      summary: Gets a list of users.
      description: Get all users in the database
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post: 
      tags:
        - user
      summary: Create a new user
      description: Create a new user 
      requestBody:
        description: A JSON object containing user information
        required: true 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid input, object invalid
  /users/{userId}: 
    parameters:
      - $ref: '#/components/parameters/idParam' 
    get:
      tags:
        - user
      summary: Get a user by id
      description: Get a user by id in the database
      responses:
        '200': 
          description: Success
          content:
            application/json:
              schema:
                items: 
                  $ref: '#/components/schemas/User'
                example:
                  id: 5
                  name: quandn
                  email: "dms@gmail.com"
                  created_at: "2024-04-05 11:31:54.251811+07"
                  updated_at: "2024-04-05 11:31:54.251811+07"
                  deleted_at: null
        '404':
          description: A user with the specified ID was not found.
    put: 
      tags:
        - user
      summary: Update a user by ID
      description: Update a user by ID
      requestBody:
        description: information user updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':  
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid input, object invalid
        '404':
          description: A user with the specified ID was not found.
    delete: 
      tags:
        - user
      summary: Delete a user by ID
      description: Delete a user by ID
      responses:
        '200':
          description: Deleted user have the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: A user with the specified ID was not found.
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - created_at
        - updated_at
        - deleted_at
      properties:
        id:  
          type: integer
          format: uuid
          description: The user ID.
          example: 1
        name:
          type: string
          description: The user name.
          example: quan
        email:
          type: string
          description: The user email.
          example: abc@gmail.com
          format: email
        created_at:
          type: string
          format: date-time
          example: 2024-04-05 10:48:08.003462+07
        updated_at:
          type: string
          format: date-time
          example: 2024-04-05 10:48:08.003462+07
        deleted_at:
          type: string
          format: date-time
          example: 2024-04-05 14:58:40.863287+07
          default: null
  parameters:
    idParam:  
      name: userId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        format: uuid
      description: Numeric ID of the user 
